
version: 2.1
commands:
   append_ips_to_inventory:
       description: "Gets AWS EC2 Instances IPS and append to inventory file"
       parameters:
         to:
            type: string
       steps:
           - run: aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Project,Values=<<parameters.to>>" --output text >> inventory  

   destroy_stack_rollback:
       description: "Detroy a Cloudformation Stack in case of fail to keep costs down"
       steps:
          - run: 
              name: Destroy Environment
              when: on_fail  
              command: |
                aws cloudformation delete-stack --stack-name ec2-infra-${CIRCLE_WORKFLOW_ID:0:5}

   deploys_sync_bucket:
       description: Deploys a bucket and syn objects from another bucket
       parameters:
          to: 
            type: string
       steps:
           - run:
              command: |
                  aws cloudformation deploy --stack-name stack-create-s3-${CIRCLE_WORKFLOW_ID:0:5} --template-file bucket.yml \
                  --parameter-overrides MyBucketName="webapp-${CIRCLE_WORKFLOW_ID:0:5}" --tags project=udapeople
                  aws s3 sync  s3://<<parameters.to>> s3://webapp-${CIRCLE_WORKFLOW_ID:0:5}
   
   destroy_s3_bucket:
        description: Destroys a bucke on success of the deployment of a new bucket and sync between them
        parameters:
           to:
             type: string
        steps:
          - run:
             command: |
              aws s3 rm s3://<<parameters.to>> --recursive
              aws s3 delete-bucket --bucket <<parameters.to>> 
             when:
              on_success


jobs:
  create_infra_ec2:
      docker: 
        - image: amazon/aws-cli
      steps:
         - checkout
         - run:
             name: Create Cloudformation Stack in AWS
             command: |
               aws cloudformation deploy \
               --template-file ec2-template.yml \
               --stack-name ec2-infra-${CIRCLE_WORKFLOW_ID:0:5} \
               --region us-east-1
  get-ec2-ips:
   docker:
      - image: amazon/aws-cli
   steps:
      - checkout
      - run:
          name: "Creates inventory file"
          command: touch inventory
      - run:
          name: "Adds header to file"
          command: echo '[servers]' > inventory
      - append_ips_to_inventory:
          to: 'udacity'
      - save_cache:
          paths:
            - "inventory"
          key: "ansible-inventory"

  print_ec2-ips:
     docker:
       - image: circleci/node:13.8.0
     steps:
       - restore_cache:
           keys: 
              - "ansible-inventory"
       - run: cat inventory

  configure_infrastructure: 
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "c2:0a:4e:f2:1c:03:83:5c:ca:1f:5f:75:3a:1e:20:c8"
      - run:
          name: Install Ansible
          command: |
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            ansible-playbook -i inventory main.yml 

  smoke_testing:
     docker:
        - image: amazon/aws-cli
     steps:
        - checkout
        - run:
           name: smoke Testing
           command: |
            return 1
        - destroy_stack_rollback

  create_and_deploy_front_end:
     docker:
       - image: amazon/aws-cli
     steps:
        - checkout
        - deploys_sync_bucket:
            to: webapp101617039436
        - destroy_s3_bucket:
            to: webapp101617039436

workflows:
  ansible-circleci-infra:
    jobs:
      # - create_infra_ec2
      #- get-ec2-ips:
      #   requires:
      #     - create_infra_ec2
      #- print_ec2-ips:
      #    requires:
      #      - get-ec2-ips
      # - configure_infrastructure
      # - smoke_testing:
      #    requires:
      #     -  create_infra_ec2
      - create_and_deploy_front_end